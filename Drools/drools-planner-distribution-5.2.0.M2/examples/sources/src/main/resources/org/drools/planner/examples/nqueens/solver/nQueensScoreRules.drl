/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.planner.examples.nqueens.solver;
    dialect "java"

import org.drools.planner.core.score.calculator.SimpleScoreCalculator;
import org.drools.planner.core.score.constraint.UnweightedConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import org.drools.planner.examples.nqueens.domain.Queen;

global SimpleScoreCalculator scoreCalculator;

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleQueensHorizontal"
    when
        $q1 : Queen($id : id, $y : y)
        $q2 : Queen(id > $id, y == $y)
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensHorizontal", $q1, $q2));
end

// multipleQueensVertical is obsolete because it is always 0

rule "multipleQueensAscendingDiagonal"
    when
        $q1 : Queen($id : id, $ascendingD : ascendingD)
        $q2 : Queen(id > $id, ascendingD == $ascendingD)
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensAscendingDiagonal", $q1, $q2));
end

rule "multipleQueensDescendingDiagonal"
    when
        $q1 : Queen($id : id, $descendingD : descendingD)
        $q2 : Queen(id > $id, descendingD == $descendingD)
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensDescendingDiagonal", $q1, $q2));
end

// ############################################################################
// Calculate score
// ############################################################################

rule "hardConstraintsBroken"
    when
        $occurrenceCount : Number() from accumulate(
            $unweightedConstraintOccurrence : UnweightedConstraintOccurrence(),
            count($unweightedConstraintOccurrence)
        )
    then
        scoreCalculator.setScore(- $occurrenceCount.intValue());
end

// Don't do this. It breaks performance and scalability! Will be fixed with set based propagation
//rule "hardConstraintsBroken"
//    when
//        $multipleQueensHorizontal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $y : y)
//            and Queen(id > $id, y == $y),
//            count($q1)
//        )
//        $multipleQueensAscendingDiagonal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $ascendingD : ascendingD)
//            and Queen(id > $id, ascendingD == $ascendingD),
//            count($q1)
//        )
//        $multipleQueensDescendingDiagonal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $descendingD : descendingD)
//            and Queen(id > $id, descendingD == $descendingD),
//            count($q1)
//        )
//    then
//        scoreCalculator.setScore(- $multipleQueensHorizontal.intValue()
//                - $multipleQueensAscendingDiagonal.intValue() - $multipleQueensDescendingDiagonal.intValue());
//end
